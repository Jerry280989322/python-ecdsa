# -*- coding:utf-8 -*-
"""generate public key on Gx-changed-NIST256p"""
"""
This is the path of the changed Class  

1./ecdas/ellipticcurve.py
    class CurveFp()
        ...
        def contains_point(self,x,y)    #comment the point-check out,always return True
        ...
    class Point()
        ...
            if self.__curve:
            assert self.__curve.contains_point(x, y)   # this will always be True
        ...
2./ecdsa/ecdsa.py
    class Public_Key()
        def __init__(): #comment the output-point checks of public key out
        ...
    NIST Curve P-256   
    _Gx = 0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c297    #change the last bit of _Gx by achaos  ('6'-->'7')
"""

"""
As we have change the _Gx and comment a series of point_checks and Raise_Error out, 
now we can use the _Gx` and the fixed sk which is generated by the Gen_sk.py to generate the public key
"""

from ecdsa import SigningKey, NIST256p
import json

skfile = 'skfile.json'
with open(skfile) as f_obj:
    sk_json=json.load(f_obj)

sk = SigningKey.from_pem(sk_json) #trans sk_pem into sk
vk = sk.get_verifying_key()

sk_pem = sk.to_pem()
vk_pem = vk.to_pem()

vkfile = 'vkfile.json'             #save the generated vk to vkfile.json in the PEM format
with open(vkfile,'w') as f_obj:
    json.dump(vk_pem,f_obj)


print(sk_pem)   #print sk_pem and vk_pem
print(vk_pem)

#verify the signature
#signature = sk.sign("message")
#assert vk.verify(signature, "message")  #验签通过则无输出，否则报错   ？？？？？能得到pubkey输出，但是会报错，comment something about the vk.verify  ？？？？？？